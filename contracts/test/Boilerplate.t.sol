// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import {SimpleAuth} from "../src/SimpleAuth.sol";
import {SimpleClaim} from "../src/SimpleClaim.sol";
import {AuthAndClaim} from "../src/AuthAndClaim.sol";
import {TwoAuthsAndClaim} from "../src/TwoAuthsAndClaim.sol";
 
contract BoilerplateTest is Test {
    bytes16 public constant APP_ID = 0x112a692a2005259c25f6094161007967;
    bytes16 public constant GROUP_ID = 0xe9ed316946d3d98dfcd829a53ec9822e;

    SimpleAuth public simpleAuth;
    SimpleClaim public simpleClaim;
    AuthAndClaim public authAndClaim;
    TwoAuthsAndClaim public twoAuthsAndClaim;

    function setUp() public {
        // prank to setup the correct root in the dev staging registry tree
        vm.startPrank(0xa687922C4bf2eB22297FdF89156B49eD3727618b);
        address(0xF3dAc93c85e92cab8f811b3A3cCaCB93140D9304).call(
            abi.encodeWithSignature(
                "registerRoot(uint256)",
                0x11F7FDE533960EA368AB0AF29E6690687BB97FF54AF42F77A071ADF0E5A0EF7B
            )
        );
        vm.stopPrank();

        simpleAuth = new SimpleAuth(APP_ID);
        simpleClaim = new SimpleClaim(APP_ID, GROUP_ID);
        authAndClaim = new AuthAndClaim(APP_ID, GROUP_ID);
        twoAuthsAndClaim = new TwoAuthsAndClaim(APP_ID, GROUP_ID);

    }

    function test_SimpleAuth() public {
        assertEq(simpleAuth.counter(), 0);

        // Data Vault ownership
        // signature of uint256 3
        bytes memory response = hex"0000000000000000000000000000000000000000000000000000000000000020112a692a2005259c25f609416100796700000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007369736d6f2d636f6e6e6563742d76310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a068796472612d73322e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012d495b4c6618a926b0a741ad2e1ff25ace5558f09c853bac3aa5306aba598bd300000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c00ca88605f2b8611cc951c39137454d020c770d0c5880e1b5bc087d819d8d43991988806072a109af27aa164f78013bd82e1ada585d19c12bcc36451a8cd24eeb03428ce07ae486ff1775e0a66b9d164d0f4a0ec47e76b98e855e361f0b9e5df3171f7c38847e37a0bef6d74544fd285c841e8e7c8d5010cde3059a0ab3e0476d08dc9bf3bc28803cdb87880ce5f613957b6a56c081be4522b49d36d846e4748523f124ed92e39180877ee2905de75916ba9f45c4b8936a95abae2b2b1907bdde199c04e70513de07a2ddbb1c4f7e492057cd936a4e421186b67f1dd9d257f6e90ba22f13e62eca65e3ea6ffdbdf11bdd378feaad826db7e572ae239a805ed9bd000000000000000000000000000000000000000000000000000000000000000000c620431992bb5a1818e1ef290d79b3c8f39838541f408b4e9d3ff4af71f8572ab71fb864979b71106135acfa84afc1d756cda74f8f258896f896b4864f025630423b4c502f1cd4179a425723bf1e15c843733af2ecdee9aef6a0451ef2db740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d495b4c6618a926b0a741ad2e1ff25ace5558f09c853bac3aa5306aba598bd30a13966ba7f5bb9e347b50a2b7fa12a296b75b5e901fdee64c14cc69b5645bc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        simpleAuth.incrementWithSismoConnect(response, 3);
        assertEq(simpleAuth.counter(), 3);
    }

    function test_SimpleClaim() public {
        assertEq(simpleClaim.counter(), 0);

        // group membership of GROUP_ID
        // signature of uint256 3
        bytes memory response = hex"0000000000000000000000000000000000000000000000000000000000000020112a692a2005259c25f609416100796700000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007369736d6f2d636f6e6e6563742d76310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c068796472612d73322e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000e9ed316946d3d98dfcd829a53ec9822e000000000000000000000000000000006c617465737400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c022201ff668cb3a3bed74387136be8df86edfaee8038587b36f0b7914bf2fcc83090ffcec91cc34bdbb261740bdf28ca43ce0e19cd4a0b93eb753bc9e2a5d358325ac2935aad8740d280ac2350a96d4c625e7556e2f8866bd2c7ad537a80fef2309bbbed0c4af0d37a7fe62795838e5e79d639cafa3e96ac86a9c550e88fa3f3f1e58ca090dea24c387ea284cc10125af877d376a28347b2aa13c311972882b122ce6ab012aee8f5c7a015ab121bc7801fb8ee4822119f914a0cd2b6839d1db321a051d5f6bc504e8aae3eedf63b918dc39ade85aaf3f9cf02e8e1685ba66edb708316a9ef52d7f835462c7d2acf9034c1ca2e7f8f88e414a6c7802ed15035e71000000000000000000000000000000000000000000000000000000000000000000c620431992bb5a1818e1ef290d79b3c8f39838541f408b4e9d3ff4af71f8572ab71fb864979b71106135acfa84afc1d756cda74f8f258896f896b4864f025630423b4c502f1cd4179a425723bf1e15c843733af2ecdee9aef6a0451ef2db7411f7fde533960ea368ab0af29e6690687bb97ff54af42f77a071adf0e5a0ef7b21a63725868405196971cad8f2e46ed111118a9869929d0f87c154c9c60d015f124bd705fd7680828b9d00982d08a5baef8249ad2e0dbcce3597a9afb1ad0cb90000000000000000000000000000000000000000000000000000000000000001285bf79dc20d58e71b9712cb38c420b9cb91d3438c8e3dbaf07829b03ffffffc00000000000000000000000000000000000000000000000000000000000000002d495b4c6618a926b0a741ad2e1ff25ace5558f09c853bac3aa5306aba598bd30a13966ba7f5bb9e347b50a2b7fa12a296b75b5e901fdee64c14cc69b5645bc2000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        simpleClaim.incrementWithSismoConnect(response, 3);
        assertEq(simpleClaim.counter(), 3);
    }

    function test_AuthAndClaim() public {
        assertEq(authAndClaim.counter(), 0);

        // Data Vault ownership
        // group membership of GROUP_ID
        // signature of uint256 3
        bytes memory response = hex"0000000000000000000000000000000000000000000000000000000000000020112a692a2005259c25f609416100796700000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007369736d6f2d636f6e6e6563742d76310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c068796472612d73322e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000e9ed316946d3d98dfcd829a53ec9822e000000000000000000000000000000006c617465737400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c02022fcdc75dda933da1204733295e99e0d8b0d906a17366e930475a786e12ef800f11b90b936a98cf64c4b83adc41187e22afa19d4dc106ab13630a27b706d122082d06fd6bab43f29fd8ef5f79d71d455b22551436bd95cb70a17846f45268a0e8bb5994ac6658277fc4395f95b89c68e5b5d5c761b11c744646a1bdc2486e812a4769b5d311a51f9e857cad1839b307536cdf4e35763716d909c8fd9f8647f0d0005f2047ac85e32cc9b2cbc040f5f10ebfd0d14c13e435baaac378f4fde9e1d75096def29e4403d05413d3f78574b6d29af72dedc63a342f4b426db7eb34802e1d4608ea152bb25cf101a3f68577680e1f26fb8a738f42a87757b24bd01b2000000000000000000000000000000000000000000000000000000000000000000c620431992bb5a1818e1ef290d79b3c8f39838541f408b4e9d3ff4af71f8572ab71fb864979b71106135acfa84afc1d756cda74f8f258896f896b4864f025630423b4c502f1cd4179a425723bf1e15c843733af2ecdee9aef6a0451ef2db7411f7fde533960ea368ab0af29e6690687bb97ff54af42f77a071adf0e5a0ef7b21a63725868405196971cad8f2e46ed111118a9869929d0f87c154c9c60d015f124bd705fd7680828b9d00982d08a5baef8249ad2e0dbcce3597a9afb1ad0cb90000000000000000000000000000000000000000000000000000000000000001285bf79dc20d58e71b9712cb38c420b9cb91d3438c8e3dbaf07829b03ffffffc00000000000000000000000000000000000000000000000000000000000000002d495b4c6618a926b0a741ad2e1ff25ace5558f09c853bac3aa5306aba598bd30a13966ba7f5bb9e347b50a2b7fa12a296b75b5e901fdee64c14cc69b5645bc200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a068796472612d73322e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012d495b4c6618a926b0a741ad2e1ff25ace5558f09c853bac3aa5306aba598bd300000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c02edda555067a14a7363695e12b84d222826a246ec75a08a698007ae88f2e5806286fa3e209051a69932398259005b9d43d66d8702911382155f113b034d339541dd252e9afd9a0160088fd0784d994617a74edc3951cec954771a8671d3712971309123d5f1a6eea95829757bd3624f22033c86e44ebc00ab35ddf4db5393b2f0d0c15dfeeaf8ba7c3c7c6c05bdaab70a781b943ed91d1259378703dcb18c140249b9cffeef47e9d1b8342e63bb671308d4642bba285d90b27f64992b6a2def40e41f8e9f3e530ea949d174d30b9daf9a55923d31b990ddc8094aa76e78f6e52137e41d9244c9af05132d9f1cc7541675a06ed2a40ca9d13e903688a65182a57000000000000000000000000000000000000000000000000000000000000000000c620431992bb5a1818e1ef290d79b3c8f39838541f408b4e9d3ff4af71f8572ab71fb864979b71106135acfa84afc1d756cda74f8f258896f896b4864f025630423b4c502f1cd4179a425723bf1e15c843733af2ecdee9aef6a0451ef2db740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d495b4c6618a926b0a741ad2e1ff25ace5558f09c853bac3aa5306aba598bd30a13966ba7f5bb9e347b50a2b7fa12a296b75b5e901fdee64c14cc69b5645bc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        authAndClaim.incrementWithSismoConnect(response, 3);
        assertEq(authAndClaim.counter(), 3);
    }

    function test_TwoAuthsAndClaim() public {
        assertEq(twoAuthsAndClaim.counter(), 0);

        // Twitter account ownership (optional)
        // GitHub account ownership (required)
        // group membership of GROUP_ID
        // signature of uint256 3
        bytes memory response = hex"0000000000000000000000000000000000000000000000000000000000000020112a692a2005259c25f609416100796700000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007369736d6f2d636f6e6e6563742d76310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c068796472612d73322e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000e9ed316946d3d98dfcd829a53ec9822e000000000000000000000000000000006c617465737400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c02643399a007ae4a36efabb7647c9c723c97637aa62b277776779343140a2bdce14e44f48031c709bffc380f32e07fb66c7129ad346352f7fed04ccd264efe55e22d60b67726d2ea5a5fe638be750f924b80fb3cffeeb9fe52cef962720bf1a18051b2ef7296b1b0914b8cdb6b47ae2de71215ded5a760dbc46d8ea66bcddffb81937c50c1dfdff20ea9d3fc8705dff6b82fe648416260e8ef82cb34fbe34195d0ea02fb123dbd9ea8b42d4382a577beecab881cc4b455f4f339caf03cac74bc910582df34c85a4d92f98bc01e6af766fe86a019be63c2172c5d4238cf1ca184b03f24f903f28b822f5e511ec3f1153b15219000b8761fb79683ea7ecbd3effcf000000000000000000000000000000000000000000000000000000000000000000c620431992bb5a1818e1ef290d79b3c8f39838541f408b4e9d3ff4af71f8572ab71fb864979b71106135acfa84afc1d756cda74f8f258896f896b4864f025630423b4c502f1cd4179a425723bf1e15c843733af2ecdee9aef6a0451ef2db7411f7fde533960ea368ab0af29e6690687bb97ff54af42f77a071adf0e5a0ef7b21a63725868405196971cad8f2e46ed111118a9869929d0f87c154c9c60d015f124bd705fd7680828b9d00982d08a5baef8249ad2e0dbcce3597a9afb1ad0cb90000000000000000000000000000000000000000000000000000000000000001285bf79dc20d58e71b9712cb38c420b9cb91d3438c8e3dbaf07829b03ffffffc00000000000000000000000000000000000000000000000000000000000000002d495b4c6618a926b0a741ad2e1ff25ace5558f09c853bac3aa5306aba598bd30a13966ba7f5bb9e347b50a2b7fa12a296b75b5e901fdee64c14cc69b5645bc200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001a068796472612d73322e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000100100000000000000000000000000009999037000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c01954e6fe79de1360f35d24735bde19dfd165eccb3b64ed07277315f02edca22b121db5e5348522f13aaa857a536b2e36c24fe3201574313e7a560fe886b85598217be6d8583c6b7d613e54ab83222101b30313fd1387017a16dd1c65e157ae692797729cb8a8c4f7b9f4a994d4e95e7e6e16d9f368d3e97c58f202feac2947af011ce7bb289057d094d70f36976168a9b1667d26281bc4718ecf385b04e7f2e11319be2e54d6e3e0fdd815c4f0c698f655aadf66d8d8c150c763a82769181d9009b2e79ba314cdecfcd5784c52c276046e43341a9c20782e601b94c3ecabd9872ed57793d75851b2c318804fbf0261d0f5a04970cd34eac5729a140cb2f6b0e3000000000000000000000000100100000000000000000000000000009999037000c620431992bb5a1818e1ef290d79b3c8f39838541f408b4e9d3ff4af71f8572ab71fb864979b71106135acfa84afc1d756cda74f8f258896f896b4864f025630423b4c502f1cd4179a425723bf1e15c843733af2ecdee9aef6a0451ef2db740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d495b4c6618a926b0a741ad2e1ff25ace5558f09c853bac3aa5306aba598bd30a13966ba7f5bb9e347b50a2b7fa12a296b75b5e901fdee64c14cc69b5645bc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";

        twoAuthsAndClaim.incrementWithSismoConnect(response, 3);
        assertEq(twoAuthsAndClaim.counter(), 3);
    }



}
